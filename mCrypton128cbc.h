#define KSIZE 128 
#include <stdio.h>
#include <stdint.h>

typedef uint16_t u16;
typedef uint8_t u8;


#define NBROUND 12

static const u16 KSCte[16]={
0x1111,0x2222,0x4444,0x8888,
0x3333,0x6666,0xcccc,0xbbbb,
0x5555,0xaaaa,0x7777,0xeeee,
0xffff,0xdddd,0x9999,0x1111
};

static const u8 sBox[4][16]={
{
0x04,0x0f,0x03,0x08,
0x0d,0x0a,0x0c,0x00,
0x0b,0x05,0x07,0x0e,
0x02,0x06,0x01,0x09
},
{
0x01,0x0c,0x07,0x0a,
0x06,0x0d,0x05,0x03,
0x0f,0x0b,0x02,0x00,
0x08,0x04,0x09,0x0e
},
{
0x07,0x0e,0x0c,0x02,
0x00,0x09,0x0d,0x0a,
0x03,0x0f,0x05,0x08,
0x06,0x04,0x0b,0x01
},
{
0x0b,0x00,0x0a,0x07,
0x0d,0x06,0x04,0x02,
0x0c,0x0e,0x03,0x09,
0x01,0x05,0x0f,0x08
}
};

static const u8 Mask[4]={14,13,11,7};

u16 Phi_Key(u8 ind,u16 value);
void Pi_Permut(u8 state[4][4]);
void Tau_Transp(u8 state[4][4]);
void Gamma_SBox(u8 state[4][4]);
void Gamma_SBox_Inv(u8 state[4][4]);
void Sigma_KeyAdd(u8 state[4][4], const u16 *rkey);
void mCEncrypt(u8 state[4][4],u16 rkey[NBROUND+1][KSIZE>>4]);
void mCDecrypt(u8 state[4][4],u16 dkey[NBROUND+1][KSIZE>>4]);

void EncryptKeySchedule(const u16 *mkey, u16 rkey[NBROUND+1][KSIZE>>4]);
void DecryptKeySchedule(const u16 *mkey, u16 rkey[NBROUND+1][KSIZE>>4]);



